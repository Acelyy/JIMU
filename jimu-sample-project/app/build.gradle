apply plugin: 'com.dd.comgradle'

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.androidTools

    defaultConfig {
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode 1
        versionName "1.0"
        applicationId "com.luojilab.androidcomponent"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [host: "app", module: "app"]
            }
        }

        vectorDrawables.useSupportLibrary = true

    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            signingConfig signingConfigs.debug
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }


}

dependencies {
    compile project(':componentservice')
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.android.support:design:27.0.2'
    compile 'com.android.support:support-vector-drawable:27.0.2'
    annotationProcessor deps.jimu.router_anno_compiler

    annotationProcessor "osp.leobert.android:report-anno-compiler:1.0.1"
//    annotationProcessor project(':router_path_reporter')
}

combuild {
    applicationName = 'com.luojilab.componentdemo.application.AppApplication'
    isRegisterCompoAuto = true
}

//use command line:'gradle clean :app:printReporter :app:compileDebugSources'
//使用插件时存在一些问题，可以使用gradle面板，选择相应的Module 输入：printReporter compileDebugSources
//执行任务，在相应的Module/Reports目录下会生成相应的报表文件，windows可能还会遇到问题，但不会在平时编译的时候出现了
task printReporter {

    println("add Router reporter ++++++++++")
    project.dependencies.add("annotationProcessor", project(':router_path_reporter'))
}